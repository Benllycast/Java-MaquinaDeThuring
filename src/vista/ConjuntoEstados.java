/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConjuntoEstados.java
 *
 * Created on 21/09/2010, 01:35:05 PM
 */

package vista;

import Modelo.Enlace;
import Modelo.Estado;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Benlly
 */
public class ConjuntoEstados extends javax.swing.JDialog {

    MaquinaTuring parent;
    
    /** Creates new form ConjuntoEstados */
    public ConjuntoEstados(MaquinaTuring parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.parent = parent;
        load();
        loadFinales();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Estados = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_Finales = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_Enlaces = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CONJUNTO DE ESTADOS");

        jTable_Estados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero", "Nombre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Estados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buscarEnlacesDelEstadoSeleccionado(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Estados);

        jTable_Finales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero", "Nombre"
            }
        ));
        jScrollPane3.setViewportView(jTable_Finales);

        jTable_Enlaces.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Simbolo Entrada", "Estado Destino", "Simbolo Escritura", "Direccion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable_Enlaces);

        jButton1.setText("Agregar Estado");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_estado(evt);
            }
        });

        jButton2.setText("Agregar Enlace");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_enlace(evt);
            }
        });

        jButton3.setText("Aceptar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptar(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Conjunto de Estados");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Cojunto de Enlaces");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("Estados Finales");

        jButton5.setText("Agregar Estado Final");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarEstadoFinal(evt);
            }
        });

        jButton4.setText("Borrar Estado");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarEstado(evt);
            }
        });

        jButton6.setText("Borrar Enlace");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarEnlace(evt);
            }
        });

        jButton7.setText("Borrar Estado Final");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarEstadoFinal(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addComponent(jButton3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(14, 14, 14)
                                .addComponent(jButton6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton7)
                            .addComponent(jButton5))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(6, 6, 6)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton4)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(11, 11, 11))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agregar_estado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregar_estado
        // TODO add your handling code here:
        Estado nuevo;
        int resp = 0;
        String nombre = JOptionPane.showInputDialog(this, "Ingre el nombre del nuevo Estado", "Nuevo Estado", JOptionPane.QUESTION_MESSAGE).trim();
        nuevo = new Controlador.ControladorEstados().crearEstado(nombre);
        if(!nombre.equals("")&&!nombre.equals(" ")){
            resp = parent.getConjuntoEstados().agregarEstado(nuevo);
        }
        if(resp==1){
            DefaultTableModel table = (DefaultTableModel)jTable_Estados.getModel();
            table.addRow(new Object[]{nuevo.getNum_Estado(),nuevo.getnombre()});
            JOptionPane.showMessageDialog(this, "Estado Ingresado","Nuevo Estado", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(this, "Es estado \""+nombre+"\" no puede ser ingresado", "Error de Ingreso", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_agregar_estado

    private void agregar_enlace(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregar_enlace
        // TODO add your handling code here:
        if(jTable_Estados.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(this, "Seleccione un Estado","Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int numero_estado = Integer.parseInt(jTable_Estados.getValueAt(jTable_Estados.getSelectedRow(), 0).toString());
        
        //System.out.print(numero_estado);
        Estado estado = parent.getConjuntoEstados().getEstado(numero_estado);
        EnlaceEstados enlaces = new EnlaceEstados(this, rootPaneCheckingEnabled);
        enlaces.setVisible(true);
        Modelo.Enlace nuevo = enlaces.getEnlaceNuevo();
        String simboloEntrada = enlaces.simboloEntrada;
        if (nuevo != null) {
            estado.agregarEnlace(simboloEntrada, nuevo);
            borrarTodasLasFilas((DefaultTableModel)jTable_Enlaces.getModel());
            loadEnlaces(estado);
        }
        
    }//GEN-LAST:event_agregar_enlace

    private void buscarEnlacesDelEstadoSeleccionado(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buscarEnlacesDelEstadoSeleccionado
        // TODO add your handling code here:
        if(jTable_Estados.getSelectedRow()==-1)
            return;
        else{
            int numero_estado = Integer.parseInt(jTable_Estados.getValueAt(jTable_Estados.getSelectedRow(), 0).toString());
            Estado estado = parent.getConjuntoEstados().getEstado(numero_estado);
            borrarTodasLasFilas((DefaultTableModel)jTable_Enlaces.getModel());
            loadEnlaces(estado);
        }
    }//GEN-LAST:event_buscarEnlacesDelEstadoSeleccionado

    private void aceptar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptar

        dispose();
    }//GEN-LAST:event_aceptar

    private void agregarEstadoFinal(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarEstadoFinal
        // TODO add your handling code here:
        if(jTable_Estados.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(this, "Seleccione un Estado","Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int numero_estado = Integer.parseInt(jTable_Estados.getValueAt(jTable_Estados.getSelectedRow(), 0).toString());
        Estado estado = parent.getConjuntoEstados().getEstado(numero_estado);
        if(estado != null && !parent.getEstadosFinales().comprobarSiFinal(estado)){
            parent.getEstadosFinales().agregarEstadoFinal(estado);
            updateTables();
            JOptionPane.showMessageDialog(this, "Estado Final Agregado", "Estado Final", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(this, "El Estado ya se encuentra en la lista de finales","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_agregarEstadoFinal

    private void borrarEstado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarEstado
        if(jTable_Estados.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(this, "Seleccione un Estado","Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int numero_estado = Integer.parseInt(jTable_Estados.getValueAt(jTable_Estados.getSelectedRow(), 0).toString());
        Estado estado = parent.getConjuntoEstados().getEstado(numero_estado);
        if(estado != null && parent.getConjuntoEstados().borrarEstado(estado)){
            borrarEstadoFinal(estado);
            updateTables();
            JOptionPane.showMessageDialog(this, "Estado Estado \""+estado.getnombre()+"\" ha sido borrado", "Conjunto de Estados", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(this, "El Estado no puede ser borrado","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_borrarEstado

    private void borrarEnlace(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarEnlace
        // aqui ahy errores
        if(jTable_Enlaces.getSelectedRow() < 0 || jTable_Estados.getSelectedRow() < 0 ){
            JOptionPane.showMessageDialog(this, "Seleccione un Estado y un Enlace","Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String CaracterEntrada = jTable_Enlaces.getValueAt(jTable_Enlaces.getSelectedRow(), 0).toString();
        int numero_estado = Integer.parseInt(jTable_Estados.getValueAt(jTable_Estados.getSelectedRow(), 0).toString());
        Estado estado = parent.getConjuntoEstados().getEstado(numero_estado);
        System.out.println(estado.getNum_Estado()+"-"+estado.getnombre()+"-");
        System.out.println(CaracterEntrada);
        if(estado != null && estado.getEnlaces().containsKey(CaracterEntrada)){
            estado.getEnlaces().remove(CaracterEntrada);
            JOptionPane.showMessageDialog(this, "El Enlace seleccionado ha sido borrado", "Conjunto de Estados", JOptionPane.INFORMATION_MESSAGE);
            loadEnlaces(estado);
        }else{
            
            JOptionPane.showMessageDialog(this, "El enlace seleccionado no puede ser borrado","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_borrarEnlace

    private void borrarEstadoFinal(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarEstadoFinal
        if(jTable_Finales.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(this, "Seleccione un Estado","Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int numero_estado = Integer.parseInt(jTable_Finales.getValueAt(jTable_Finales.getSelectedRow(), 0).toString());
        Estado estado = parent.getEstadosFinales().getEstado(numero_estado);
        if(estado != null && borrarEstadoFinal(estado)){
            updateTables();
            JOptionPane.showMessageDialog(this, "Estado Estado \""+estado.getnombre()+"\" ha sido borrado", "Conjunto de Estados", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(this, "El Estado no puede ser borrado","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_borrarEstadoFinal

    public void load(){
        Iterator i = parent.getConjuntoEstados().getListEstados().iterator();
        while(i.hasNext()){
            Estado actual = (Estado)i.next();
            ((DefaultTableModel)jTable_Estados.getModel()).addRow(new Object[]{actual.getNum_Estado(),actual.getnombre()});
        }
    }

    public void loadFinales(){
        Iterator i = parent.getEstadosFinales().getListEstados().iterator();
        while(i.hasNext()){
            Estado actual = (Estado)i.next();
            ((DefaultTableModel)jTable_Finales.getModel()).addRow(new Object[]{actual.getNum_Estado(),actual.getnombre()});
        }
    }

    public void loadEnlaces(Estado estado){
        Map<String, Enlace> enlaces = estado.getEnlaces();
        Iterator i = enlaces.entrySet().iterator();
        while(i.hasNext()){
            Map.Entry entry = (Map.Entry) i.next();
            String key = (String)entry.getKey();
            Enlace value = (Enlace)entry.getValue();
            String direccion=(value.getDireccion()==0)? "Derecha":"Izquierda";
            ((DefaultTableModel)jTable_Enlaces.getModel()).addRow(new Object [] {key, value.getstate().getnombre(), value.getsimbolo().getsimbolo(), direccion});            
        }
    }

    public void borrarTodasLasFilas(DefaultTableModel dtm){
        for (int i = dtm.getRowCount() -1; i >= 0; i--){
            dtm.removeRow(i);
        }
    }

    public void updateTables() {
        borrarTodasLasFilas((DefaultTableModel)jTable_Estados.getModel());
        borrarTodasLasFilas((DefaultTableModel)jTable_Finales.getModel());
        load();
        loadFinales();
    }

    public boolean borrarEstadoFinal(Estado estado){
        if(parent.getEstadosFinales().comprobarSiFinal(estado)){
            return parent.getEstadosFinales().borrarEstado(estado);
        }
        return false;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable_Enlaces;
    private javax.swing.JTable jTable_Estados;
    private javax.swing.JTable jTable_Finales;
    // End of variables declaration//GEN-END:variables

}
